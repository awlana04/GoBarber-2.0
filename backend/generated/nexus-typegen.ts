/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as prisma from "./../node_modules/.prisma/client/index"
import { Context } from "./../src/context"
import { core, connectionPluginCore } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AppointmentCreateInput: { // input type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    date: NexusGenScalars['DateTime']; // DateTime!
    provider: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AppointmentUpdateInput: { // input type
    createdAt?: NexusGenInputs['DateTimeFieldUpdateOperationsInput'] | null; // DateTimeFieldUpdateOperationsInput
    date?: NexusGenInputs['DateTimeFieldUpdateOperationsInput'] | null; // DateTimeFieldUpdateOperationsInput
    provider?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    updatedAt?: NexusGenInputs['DateTimeFieldUpdateOperationsInput'] | null; // DateTimeFieldUpdateOperationsInput
  }
  AppointmentWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  DateTimeFieldUpdateOperationsInput: { // input type
    set?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  StringFieldUpdateOperationsInput: { // input type
    set?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Appointment: prisma.Appointment;
  Mutation: {};
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Appointment: { // field return type
    createdAt: number | null; // Int
    date: number | null; // Int
    id: number; // Int!
    provider: string; // String!
    updatedAt: number | null; // Int
  }
  Mutation: { // field return type
    createOneAppointment: NexusGenRootTypes['Appointment']; // Appointment!
    deleteOneAppointment: NexusGenRootTypes['Appointment'] | null; // Appointment
    updateOneAppointment: NexusGenRootTypes['Appointment'] | null; // Appointment
  }
  Query: { // field return type
    appointment: NexusGenRootTypes['Appointment'] | null; // Appointment
    appointments: NexusGenRootTypes['Appointment'][]; // [Appointment!]!
  }
}

export interface NexusGenFieldTypeNames {
  Appointment: { // field return type name
    createdAt: 'Int'
    date: 'Int'
    id: 'Int'
    provider: 'String'
    updatedAt: 'Int'
  }
  Mutation: { // field return type name
    createOneAppointment: 'Appointment'
    deleteOneAppointment: 'Appointment'
    updateOneAppointment: 'Appointment'
  }
  Query: { // field return type name
    appointment: 'Appointment'
    appointments: 'Appointment'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneAppointment: { // args
      data: NexusGenInputs['AppointmentCreateInput']; // AppointmentCreateInput!
    }
    deleteOneAppointment: { // args
      where: NexusGenInputs['AppointmentWhereUniqueInput']; // AppointmentWhereUniqueInput!
    }
    updateOneAppointment: { // args
      data: NexusGenInputs['AppointmentUpdateInput']; // AppointmentUpdateInput!
      where: NexusGenInputs['AppointmentWhereUniqueInput']; // AppointmentWhereUniqueInput!
    }
  }
  Query: {
    appointment: { // args
      where: NexusGenInputs['AppointmentWhereUniqueInput']; // AppointmentWhereUniqueInput!
    }
    appointments: { // args
      after?: NexusGenInputs['AppointmentWhereUniqueInput'] | null; // AppointmentWhereUniqueInput
      before?: NexusGenInputs['AppointmentWhereUniqueInput'] | null; // AppointmentWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}