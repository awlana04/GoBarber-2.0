import * as Typegen from 'nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
    first?: boolean
    last?: boolean
    before?: boolean
    after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'DateTime'

// Prisma model type definitions
interface PrismaModels {
  User: Prisma.User
  Profile: Prisma.Profile
  Barber: Prisma.Barber
  Appointment: Prisma.Appointment
  Account: Prisma.Account
  Session: Prisma.Session
  VerificationRequest: Prisma.VerificationRequest
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    users: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'email' | 'password' | 'type' | 'name' | 'image' | 'emailVerified' | 'profile' | 'barber' | 'appointment' | 'accounts' | 'sessions' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'email' | 'password' | 'type' | 'name' | 'image' | 'emailVerified' | 'createdAt' | 'updatedAt'
    }
    profiles: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'avatar' | 'userId' | 'user' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'name' | 'avatar' | 'userId' | 'createdAt' | 'updatedAt'
    }
    barbers: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'barberLocation' | 'barberName' | 'description' | 'photos' | 'openOnWeekends' | 'userId' | 'user' | 'appointments' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'barberLocation' | 'barberName' | 'description' | 'photos' | 'openOnWeekends' | 'userId' | 'createdAt' | 'updatedAt'
    }
    appointments: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'date' | 'userId' | 'user' | 'barberId' | 'barber' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'date' | 'userId' | 'barberId' | 'createdAt' | 'updatedAt'
    }
    accounts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'compoundId' | 'userId' | 'providerType' | 'providerId' | 'providerAccountId' | 'refreshToken' | 'accessToken' | 'accessTokenExpires' | 'createdAt' | 'updatedAt' | 'User'
      ordering: 'id' | 'compoundId' | 'userId' | 'providerType' | 'providerId' | 'providerAccountId' | 'refreshToken' | 'accessToken' | 'accessTokenExpires' | 'createdAt' | 'updatedAt'
    }
    sessions: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'userId' | 'expires' | 'sessionToken' | 'accessToken' | 'createdAt' | 'updatedAt' | 'User'
      ordering: 'id' | 'userId' | 'expires' | 'sessionToken' | 'accessToken' | 'createdAt' | 'updatedAt'
    }
    verificationRequests: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'identifier' | 'token' | 'expires' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'identifier' | 'token' | 'expires' | 'createdAt' | 'updatedAt'
    }
  },
  User: {
    profile: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'avatar' | 'userId' | 'user' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'name' | 'avatar' | 'userId' | 'createdAt' | 'updatedAt'
    }
    barber: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'barberLocation' | 'barberName' | 'description' | 'photos' | 'openOnWeekends' | 'userId' | 'user' | 'appointments' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'barberLocation' | 'barberName' | 'description' | 'photos' | 'openOnWeekends' | 'userId' | 'createdAt' | 'updatedAt'
    }
    appointment: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'date' | 'userId' | 'user' | 'barberId' | 'barber' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'date' | 'userId' | 'barberId' | 'createdAt' | 'updatedAt'
    }
    accounts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'compoundId' | 'userId' | 'providerType' | 'providerId' | 'providerAccountId' | 'refreshToken' | 'accessToken' | 'accessTokenExpires' | 'createdAt' | 'updatedAt' | 'User'
      ordering: 'id' | 'compoundId' | 'userId' | 'providerType' | 'providerId' | 'providerAccountId' | 'refreshToken' | 'accessToken' | 'accessTokenExpires' | 'createdAt' | 'updatedAt'
    }
    sessions: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'userId' | 'expires' | 'sessionToken' | 'accessToken' | 'createdAt' | 'updatedAt' | 'User'
      ordering: 'id' | 'userId' | 'expires' | 'sessionToken' | 'accessToken' | 'createdAt' | 'updatedAt'
    }
  }
  Profile: {

  }
  Barber: {
    appointments: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'date' | 'userId' | 'user' | 'barberId' | 'barber' | 'createdAt' | 'updatedAt'
      ordering: 'id' | 'date' | 'userId' | 'barberId' | 'createdAt' | 'updatedAt'
    }
  }
  Appointment: {

  }
  Account: {

  }
  Session: {

  }
  VerificationRequest: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    user: 'User'
    users: 'User'
    profile: 'Profile'
    profiles: 'Profile'
    barber: 'Barber'
    barbers: 'Barber'
    appointment: 'Appointment'
    appointments: 'Appointment'
    account: 'Account'
    accounts: 'Account'
    session: 'Session'
    sessions: 'Session'
    verificationRequest: 'VerificationRequest'
    verificationRequests: 'VerificationRequest'
  },
  Mutation: {
    createOneUser: 'User'
    updateOneUser: 'User'
    updateManyUser: 'AffectedRowsOutput'
    deleteOneUser: 'User'
    deleteManyUser: 'AffectedRowsOutput'
    upsertOneUser: 'User'
    createOneProfile: 'Profile'
    updateOneProfile: 'Profile'
    updateManyProfile: 'AffectedRowsOutput'
    deleteOneProfile: 'Profile'
    deleteManyProfile: 'AffectedRowsOutput'
    upsertOneProfile: 'Profile'
    createOneBarber: 'Barber'
    updateOneBarber: 'Barber'
    updateManyBarber: 'AffectedRowsOutput'
    deleteOneBarber: 'Barber'
    deleteManyBarber: 'AffectedRowsOutput'
    upsertOneBarber: 'Barber'
    createOneAppointment: 'Appointment'
    updateOneAppointment: 'Appointment'
    updateManyAppointment: 'AffectedRowsOutput'
    deleteOneAppointment: 'Appointment'
    deleteManyAppointment: 'AffectedRowsOutput'
    upsertOneAppointment: 'Appointment'
    createOneAccount: 'Account'
    updateOneAccount: 'Account'
    updateManyAccount: 'AffectedRowsOutput'
    deleteOneAccount: 'Account'
    deleteManyAccount: 'AffectedRowsOutput'
    upsertOneAccount: 'Account'
    createOneSession: 'Session'
    updateOneSession: 'Session'
    updateManySession: 'AffectedRowsOutput'
    deleteOneSession: 'Session'
    deleteManySession: 'AffectedRowsOutput'
    upsertOneSession: 'Session'
    createOneVerificationRequest: 'VerificationRequest'
    updateOneVerificationRequest: 'VerificationRequest'
    updateManyVerificationRequest: 'AffectedRowsOutput'
    deleteOneVerificationRequest: 'VerificationRequest'
    deleteManyVerificationRequest: 'AffectedRowsOutput'
    upsertOneVerificationRequest: 'VerificationRequest'
  },
  User: {
    id: 'String'
    email: 'String'
    password: 'String'
    type: 'Boolean'
    name: 'String'
    image: 'String'
    emailVerified: 'DateTime'
    profile: 'Profile'
    barber: 'Barber'
    appointment: 'Appointment'
    accounts: 'Account'
    sessions: 'Session'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  Profile: {
    id: 'String'
    name: 'String'
    avatar: 'String'
    userId: 'String'
    user: 'User'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  Barber: {
    id: 'String'
    barberLocation: 'String'
    barberName: 'String'
    description: 'String'
    photos: 'String'
    openOnWeekends: 'Boolean'
    userId: 'String'
    user: 'User'
    appointments: 'Appointment'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  Appointment: {
    id: 'String'
    date: 'DateTime'
    userId: 'String'
    user: 'User'
    barberId: 'String'
    barber: 'Barber'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
  Account: {
    id: 'String'
    compoundId: 'String'
    userId: 'String'
    providerType: 'String'
    providerId: 'String'
    providerAccountId: 'String'
    refreshToken: 'String'
    accessToken: 'String'
    accessTokenExpires: 'DateTime'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
    User: 'User'
  }
  Session: {
    id: 'String'
    userId: 'String'
    expires: 'DateTime'
    sessionToken: 'String'
    accessToken: 'String'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
    User: 'User'
  }
  VerificationRequest: {
    id: 'String'
    identifier: 'String'
    token: 'String'
    expires: 'DateTime'
    createdAt: 'DateTime'
    updatedAt: 'DateTime'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  User: Typegen.NexusPrismaFields<'User'>
  Profile: Typegen.NexusPrismaFields<'Profile'>
  Barber: Typegen.NexusPrismaFields<'Barber'>
  Appointment: Typegen.NexusPrismaFields<'Appointment'>
  Account: Typegen.NexusPrismaFields<'Account'>
  Session: Typegen.NexusPrismaFields<'Session'>
  VerificationRequest: Typegen.NexusPrismaFields<'VerificationRequest'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  