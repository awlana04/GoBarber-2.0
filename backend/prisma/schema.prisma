// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())

  email    String  @unique
  password String?

  profile     Profile[]
  barber      Barber[]
  appointment Appointment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Profile {
  id String @id @default(uuid())

  name   String
  avatar String?
  type   Boolean @default(false)

  userId String? @map(name: "user_id")
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "profiles")
}

model Barber {
  id String @id @default(uuid())

  barberLocation String   @map(name: "barber_location")
  barberName     String?  @map(name: "barber_name")
  description    String?
  photos         String[]
  openOnWeekends Boolean  @map(name: "open_on_weekends")

  userId String? @map(name: "user_id")
  user   User?   @relation(fields: [userId], references: [id])

  appointments Appointment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "barbers")
}

model Appointment {
  id String @id @default(uuid())

  date DateTime

  userId   String @map(name: "user_id")
  user     User   @relation(fields: [userId], references: [id])
  barberId String @map(name: "barber_id")
  barber   Barber @relation(fields: [barberId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "appointments")
}
