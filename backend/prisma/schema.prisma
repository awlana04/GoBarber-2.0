// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Appointment {
<<<<<<< HEAD
  id String @id @default(uuid())

  // Appointment's details
  date DateTime

  userId   String
  user     User   @relation(fields: [userId], references: [id])
  barberId String
  barber   Barber @relation(fields: [barberId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id String @id @default(uuid())

  // User's about
  type Boolean @default(false)
  name String

  // User's credentials
  email    String  @unique
  password String
  avatar   String?

  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barber {
  id String @id @default(uuid())

  // Barber's information
  barberLocation String
  barberName     String
  description    String?
  photos         String[]
  openOnWeekends Boolean

  appointment Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
=======
  id          Int         @id @default(autoincrement())

  // Appoitment's details
  provider    String
  date        DateTime

  user        User[]
  barber      Barber[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model User {
  id            Int           @id @default(autoincrement())

  // User's about
  type          Boolean
  name          String

  // User's credentials
  email         String        @unique
  password      String
  avatar        String?

  providerId    Int
  provider      Appointment   @relation(fields: [providerId], references: [id])

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Barber {
  id            Int           @id @default(autoincrement())

  // Barber's information
  barberLocation    String
  barberName        String
  description       String?
  photos            String[]
  openOnWeekends    Boolean

  providerId        Int
  provider          Appointment   @relation(fields: [providerId], references: [id])

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
>>>>>>> origin/test
}
