### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Appointment {
  barber: Barber!
  createdAt: DateTime!
  date: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
}

input AppointmentWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String
  user: User
}

type Barber {
  appointments(after: AppointmentWhereUniqueInput, before: AppointmentWhereUniqueInput, first: Int, last: Int): [Appointment!]!
  barberLocation: String!
  barberName: String
  createdAt: DateTime!
  description: String
  id: String!
  openOnWeekends: Boolean!
  photos: [String!]!
  updatedAt: DateTime!
  user: User
}

input BarberWhereUniqueInput {
  id: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Mutation {
  createBarber(barberLocation: String!, barberName: String, description: String, id: String, openOnWeekends: Boolean!, photos: [String!]!): Barber
  createProfile(avatar: String, id: String, name: String!, type: Boolean): Profile
  deleteUser(email: String!, password: String!): User
  signin(email: String!, password: String!): AuthPayload
  signup(email: String!, password: String!): AuthPayload
  updateBarber(barberLocation: String!, barberName: String, description: String, id: String, openOnWeekends: Boolean!, photos: [String!]!): Barber
  updateUser(id: String, image: String, name: String): User
}

type Profile {
  avatar: String
  createdAt: DateTime!
  id: String!
  name: String!
  type: Boolean!
  updatedAt: DateTime!
  user: User
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  allBarbers: [Barber]
  barber(id: String): Barber
  me: User
}

type User {
  appointment(after: AppointmentWhereUniqueInput, before: AppointmentWhereUniqueInput, first: Int, last: Int): [Appointment!]!
  barber(after: BarberWhereUniqueInput, before: BarberWhereUniqueInput, first: Int, last: Int): [Barber!]!
  createdAt: DateTime!
  email: String!
  id: String!
  profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
  updatedAt: DateTime!
}
