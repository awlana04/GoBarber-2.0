{"ast":null,"code":"import { objectType } from 'nexus';\nimport { getUserId } from '../../utils/getUserId';\nexport const Query = objectType({\n  name: 'Query',\n\n  definition(t) {\n    t.field('me', {\n      type: 'User',\n      resolve: (_parent, args, context) => {\n        const userId = getUserId(context);\n        return context.prisma.user.findUnique({\n          where: {\n            id: String(userId)\n          }\n        });\n      }\n    });\n    t.field('barber', {\n      type: 'Barber',\n      resolve: (_parent, args, context) => {\n        const userId = getUserId(context);\n        return context.prisma.barber.findUnique({\n          where: {\n            id: String(userId)\n          }\n        });\n      }\n    });\n    t.list.field('allBarbers', {\n      type: 'Barber',\n      resolve: (_parent, _args, context) => {\n        return context.prisma.barber.findMany();\n      }\n    });\n    t.field('appointment', {\n      type: 'Appointment',\n      resolve: (_parent, _args, context) => {\n        const userId = getUserId(context);\n        return context.prisma.appointment.findUnique({\n          where: {\n            id: String(userId)\n          }\n        });\n      }\n    }); // t.list.field('allAppointments', {\n    //   type: 'Appointment',\n    //   resolve: (_parent, _args, context: Context) => {\n    //     const userId = getUserId(context);\n    //     return context.prisma.appointment.findMany({\n    //       where: {\n    //         barber: { id: String(userId) },\n    //       }\n    //     });\n    //   }\n    // })\n  }\n\n});","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/pages/api/nexus/resolvers/Query.ts"],"names":["objectType","getUserId","Query","name","definition","t","field","type","resolve","_parent","args","context","userId","prisma","user","findUnique","where","id","String","barber","list","_args","findMany","appointment"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAGA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAO,MAAMC,KAAK,GAAGF,UAAU,CAAC;AAC9BG,EAAAA,IAAI,EAAE,OADwB;;AAE9BC,EAAAA,UAAU,CAACC,CAAD,EAAI;AACZA,IAAAA,CAAC,CAACC,KAAF,CAAQ,IAAR,EAAc;AACZC,MAAAA,IAAI,EAAE,MADM;AAEZC,MAAAA,OAAO,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,KAAqC;AAC5C,cAAMC,MAAM,GAAGX,SAAS,CAACU,OAAD,CAAxB;AAEA,eAAOA,OAAO,CAACE,MAAR,CAAeC,IAAf,CAAoBC,UAApB,CAA+B;AACpCC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEC,MAAM,CAACN,MAAD;AADL;AAD6B,SAA/B,CAAP;AAKD;AAVW,KAAd;AAaAP,IAAAA,CAAC,CAACC,KAAF,CAAQ,QAAR,EAAkB;AAChBC,MAAAA,IAAI,EAAE,QADU;AAEhBC,MAAAA,OAAO,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,OAAhB,KAAqC;AAC5C,cAAMC,MAAM,GAAGX,SAAS,CAACU,OAAD,CAAxB;AAEA,eAAOA,OAAO,CAACE,MAAR,CAAeM,MAAf,CAAsBJ,UAAtB,CAAiC;AACtCC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEC,MAAM,CAACN,MAAD;AADL;AAD+B,SAAjC,CAAP;AAKD;AAVe,KAAlB;AAaAP,IAAAA,CAAC,CAACe,IAAF,CAAOd,KAAP,CAAa,YAAb,EAA2B;AACzBC,MAAAA,IAAI,EAAE,QADmB;AAEzBC,MAAAA,OAAO,EAAE,CAACC,OAAD,EAAUY,KAAV,EAAiBV,OAAjB,KAAsC;AAC7C,eAAOA,OAAO,CAACE,MAAR,CAAeM,MAAf,CAAsBG,QAAtB,EAAP;AACD;AAJwB,KAA3B;AAOAjB,IAAAA,CAAC,CAACC,KAAF,CAAQ,aAAR,EAAuB;AACrBC,MAAAA,IAAI,EAAE,aADe;AAErBC,MAAAA,OAAO,EAAE,CAACC,OAAD,EAAUY,KAAV,EAAiBV,OAAjB,KAAsC;AAC7C,cAAMC,MAAM,GAAGX,SAAS,CAACU,OAAD,CAAxB;AAEA,eAAOA,OAAO,CAACE,MAAR,CAAeU,WAAf,CAA2BR,UAA3B,CAAsC;AAC3CC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEC,MAAM,CAACN,MAAD;AADL;AADoC,SAAtC,CAAP;AAKD;AAVoB,KAAvB,EAlCY,CA+CZ;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AA7D6B,CAAD,CAAxB","sourcesContent":["import { objectType } from 'nexus';\n\nimport { Context } from '../context';\nimport { getUserId } from '../../utils/getUserId';\n\nexport const Query = objectType({\n  name: 'Query',\n  definition(t) {\n    t.field('me', {\n      type: 'User',\n      resolve: (_parent, args, context: Context) => {\n        const userId = getUserId(context);\n\n        return context.prisma.user.findUnique({\n          where: {\n            id: String(userId),\n          }\n        })\n      }\n    })\n\n    t.field('barber', {\n      type: 'Barber',\n      resolve: (_parent, args, context: Context) => {\n        const userId = getUserId(context);\n\n        return context.prisma.barber.findUnique({\n          where: {\n            id: String(userId),\n          }\n        })\n      }\n    })\n\n    t.list.field('allBarbers', {\n      type: 'Barber',\n      resolve: (_parent, _args, context: Context) => {\n        return context.prisma.barber.findMany();\n      }\n    })\n\n    t.field('appointment', {\n      type: 'Appointment',\n      resolve: (_parent, _args, context: Context) => {\n        const userId = getUserId(context);\n\n        return context.prisma.appointment.findUnique({\n          where: {\n            id: String(userId),\n          }\n        });\n      }\n    })\n\n    // t.list.field('allAppointments', {\n    //   type: 'Appointment',\n    //   resolve: (_parent, _args, context: Context) => {\n    //     const userId = getUserId(context);\n\n    //     return context.prisma.appointment.findMany({\n    //       where: {\n    //         barber: { id: String(userId) },\n    //       }\n    //     });\n    //   }\n    // })\n  }\n})\n"]},"metadata":{},"sourceType":"module"}