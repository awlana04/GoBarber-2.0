{"ast":null,"code":"import _regeneratorRuntime from \"/home/lon1/Documents/scripts/www/GoBarber-2.0/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/home/lon1/Documents/scripts/www/GoBarber-2.0/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/home/lon1/Documents/scripts/www/GoBarber-2.0/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from 'apollo-link-context';\nvar httpLink = new HttpLink({\n  uri: 'http://localhost:4000'\n});\nvar errorLink = onError(function (_ref) {\n  var graphQLErrors = _ref.graphQLErrors,\n      networkError = _ref.networkError;\n\n  if (graphQLErrors) {\n    graphQLErrors.forEach(function (_ref2) {\n      var message = _ref2.message,\n          locations = _ref2.locations,\n          path = _ref2.path;\n      console.log(\"[GraphQLError]: Message: \".concat(message, \", location: \").concat(locations, \", path: \").concat(path));\n    });\n  }\n\n  if (networkError) {\n    console.log(\"[NetworkError]: \".concat(networkError));\n  }\n});\nvar authLink = setContext( /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, _ref3) {\n    var headers, token;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _ref3.headers;\n            token = localStorage.getItem('token');\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, headers), {}, {\n              headers: {\n                Authorization: token ? \"Bearer \".concat(token) : null\n              }\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nvar link = authLink.concat(httpLink);\nvar client = new ApolloClient({\n  link: from([errorLink, link]),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/hooks/auth.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","from","onError","setContext","httpLink","uri","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","authLink","request","headers","token","localStorage","getItem","Authorization","link","concat","client","cache"],"mappings":";;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,EAAgDC,IAAhD,QAA4D,gBAA5D;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,IAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,IAAMC,SAAS,GAAGJ,OAAO,CAAC,gBAAqC;AAAA,MAAlCK,aAAkC,QAAlCA,aAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,OAAd,CAAsB,iBAAkC;AAAA,UAA/BC,OAA+B,SAA/BA,OAA+B;AAAA,UAAtBC,SAAsB,SAAtBA,SAAsB;AAAA,UAAXC,IAAW,SAAXA,IAAW;AACtDC,MAAAA,OAAO,CAACC,GAAR,oCAC8BJ,OAD9B,yBACoDC,SADpD,qBACwEC,IADxE;AAGD,KAJD;AAKD;;AAED,MAAIJ,YAAJ,EAAkB;AAChBK,IAAAA,OAAO,CAACC,GAAR,2BAA+BN,YAA/B;AACD;AACF,CAZwB,CAAzB;AAcA,IAAMO,QAAQ,GAAGZ,UAAU;AAAA,uEAAC,iBAAOa,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkBC,YAAAA,OAAlB,SAAkBA,OAAlB;AACpBC,YAAAA,KADoB,GACZC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADY;AAAA,6EAIrBH,OAJqB;AAKxBA,cAAAA,OAAO,EAAE;AACPI,gBAAAA,aAAa,EAAEH,KAAK,oBAAaA,KAAb,IAAuB;AADpC;AALe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD;;AAAA;AAAA;AAAA;AAAA,IAA3B;AAWA,IAAMI,IAAI,GAAGP,QAAQ,CAACQ,MAAT,CAAgBnB,QAAhB,CAAb;AAEA,IAAMoB,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC9BwB,EAAAA,IAAI,EAAErB,IAAI,CAAC,CAACK,SAAD,EAAYgB,IAAZ,CAAD,CADoB;AAE9BG,EAAAA,KAAK,EAAE,IAAI1B,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAeyB,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from 'apollo-link-context';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' });\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQLError]: Message: ${message}, location: ${locations}, path: ${path}`\n      );\n    })\n  }\n\n  if (networkError) {\n    console.log(`[NetworkError]: ${networkError}`);\n  }\n})\n\nconst authLink = setContext(async (request, { headers }) => {\n  const token = localStorage.getItem('token');\n\n  return {\n    ...headers,\n    headers: {\n      Authorization: token ? `Bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = authLink.concat(httpLink as any);\n\nconst client = new ApolloClient({\n  link: from([errorLink, link as any]),\n  cache: new InMemoryCache(),\n})\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}