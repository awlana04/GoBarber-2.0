{"ast":null,"code":"import { rule, shield } from 'graphql-shield';\nimport { getUserId } from '../utils/getUserId';\nconst rules = {\n  isAuthenticatedUser: rule()((_parent, _args, context) => {\n    const userId = getUserId(context);\n    return Boolean(userId);\n  }) // isPostOwner: rule()(async (_parent, args, context) => {\n  //   const userId = getUserId(context);\n  //   const author = await context.prisma.tweet\n  //     .findUnique({\n  //       where: {\n  //         id: String(args.id),\n  //       },\n  //     })\n  //     .author()\n  //   return userId === author.id;\n  // }),\n\n};\nexport const permissions = shield({\n  Query: {\n    me: rules.isAuthenticatedUser\n  }\n});","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/pages/api/config/permissions.ts"],"names":["rule","shield","getUserId","rules","isAuthenticatedUser","_parent","_args","context","userId","Boolean","permissions","Query","me"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,gBAA7B;AAEA,SAASC,SAAT,QAA0B,oBAA1B;AAGA,MAAMC,KAAK,GAAG;AACZC,EAAAA,mBAAmB,EAAEJ,IAAI,GAAG,CAACK,OAAD,EAAUC,KAAV,EAAiBC,OAAjB,KAAsC;AAChE,UAAMC,MAAM,GAAGN,SAAS,CAACK,OAAD,CAAxB;AAEA,WAAOE,OAAO,CAACD,MAAD,CAAd;AACD,GAJwB,CADb,CAOZ;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAnBY,CAAd;AAsBA,OAAO,MAAME,WAAW,GAAGT,MAAM,CAAC;AAChCU,EAAAA,KAAK,EAAE;AACLC,IAAAA,EAAE,EAAET,KAAK,CAACC;AADL;AADyB,CAAD,CAA1B","sourcesContent":["import { rule, shield } from 'graphql-shield';\n\nimport { getUserId } from '../utils/getUserId';\nimport { Context } from '../context';\n\nconst rules = {\n  isAuthenticatedUser: rule()((_parent, _args, context: Context) => {\n    const userId = getUserId(context);\n\n    return Boolean(userId);\n  }),\n\n  // isPostOwner: rule()(async (_parent, args, context) => {\n  //   const userId = getUserId(context);\n\n  //   const author = await context.prisma.tweet\n  //     .findUnique({\n  //       where: {\n  //         id: String(args.id),\n  //       },\n  //     })\n  //     .author()\n\n  //   return userId === author.id;\n  // }),\n}\n\nexport const permissions = shield({\n  Query: {\n    me: rules.isAuthenticatedUser,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}