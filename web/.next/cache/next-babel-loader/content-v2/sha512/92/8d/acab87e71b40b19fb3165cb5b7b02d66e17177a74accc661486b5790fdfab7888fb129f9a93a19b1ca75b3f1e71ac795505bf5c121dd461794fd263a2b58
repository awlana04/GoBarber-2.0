{"ast":null,"code":"import { makeSchema, asNexusMethod, connectionPlugin } from 'nexus';\nimport { nexusPrisma } from 'nexus-plugin-prisma';\nimport { applyMiddleware } from 'graphql-middleware';\nimport { DateTimeResolver } from 'graphql-scalars';\nimport path from 'path';\nimport { permissions } from '../config/permissions';\nimport { User } from './schemas/User';\nimport { Barber } from './schemas/Barber';\nimport { Profile } from './schemas/Profile';\nimport { Appointment } from './schemas/Appointment';\nimport { Query } from './resolvers/Query';\nimport { Mutation } from './resolvers/Mutation';\nimport { AuthPayload } from './resolvers/AuthPayload';\nexport const DateTime = asNexusMethod(DateTimeResolver, 'date');\nconst schemaWithPermissions = makeSchema({\n  types: [User, Barber, Profile, Appointment, Query, Mutation, AuthPayload],\n  outputs: {\n    schema: path.join(__dirname, '..', '..', '..', '..', 'schema.graphql'),\n    typegen: path.join(__dirname, '..', '..', '..', '..', 'generated', 'nexus.ts')\n  },\n  plugins: [nexusPrisma({\n    experimentalCRUD: true\n  }), connectionPlugin()],\n  contextType: {\n    module: path.join(__filename, '..', 'context.ts'),\n    export: 'Context'\n  },\n  sourceTypes: {\n    modules: [{\n      module: '@prisma/client',\n      alias: 'prisma'\n    }]\n  }\n});\nexport const schema = applyMiddleware(schemaWithPermissions, permissions);","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/pages/api/nexus/index.ts"],"names":["makeSchema","asNexusMethod","connectionPlugin","nexusPrisma","applyMiddleware","DateTimeResolver","path","permissions","User","Barber","Profile","Appointment","Query","Mutation","AuthPayload","DateTime","schemaWithPermissions","types","outputs","schema","join","__dirname","typegen","plugins","experimentalCRUD","contextType","module","__filename","export","sourceTypes","modules","alias"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,gBAApC,QAA4D,OAA5D;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,SAASC,IAAT,QAAqB,gBAArB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AAEA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAGd,aAAa,CAACI,gBAAD,EAAmB,MAAnB,CAA9B;AAEP,MAAMW,qBAAqB,GAAGhB,UAAU,CAAC;AACvCiB,EAAAA,KAAK,EAAE,CAACT,IAAD,EAAOC,MAAP,EAAeC,OAAf,EAAwBC,WAAxB,EAAqCC,KAArC,EAA4CC,QAA5C,EAAsDC,WAAtD,CADgC;AAEvCI,EAAAA,OAAO,EAAE;AACPC,IAAAA,MAAM,EAAEb,IAAI,CAACc,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,IAAvC,EAA6C,gBAA7C,CADD;AAEPC,IAAAA,OAAO,EAAEhB,IAAI,CAACc,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,IAAjC,EAAuC,IAAvC,EAA6C,WAA7C,EAA0D,UAA1D;AAFF,GAF8B;AAMvCE,EAAAA,OAAO,EAAE,CAACpB,WAAW,CAAC;AAAEqB,IAAAA,gBAAgB,EAAE;AAApB,GAAD,CAAZ,EAA0CtB,gBAAgB,EAA1D,CAN8B;AAOvCuB,EAAAA,WAAW,EAAE;AACXC,IAAAA,MAAM,EAAEpB,IAAI,CAACc,IAAL,CAAUO,UAAV,EAAsB,IAAtB,EAA4B,YAA5B,CADG;AAEXC,IAAAA,MAAM,EAAE;AAFG,GAP0B;AAWvCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,OAAO,EAAE,CACP;AACEJ,MAAAA,MAAM,EAAE,gBADV;AAEEK,MAAAA,KAAK,EAAE;AAFT,KADO;AADE;AAX0B,CAAD,CAAxC;AAqBA,OAAO,MAAMZ,MAAM,GAAGf,eAAe,CAACY,qBAAD,EAAwBT,WAAxB,CAA9B","sourcesContent":["import { makeSchema, asNexusMethod, connectionPlugin } from 'nexus';\nimport { nexusPrisma } from 'nexus-plugin-prisma';\nimport { applyMiddleware } from 'graphql-middleware';\nimport { DateTimeResolver } from 'graphql-scalars';\nimport path from 'path';\n\nimport { permissions } from '../config/permissions';\n\nimport { User } from './schemas/User';\nimport { Barber } from './schemas/Barber';\nimport { Profile } from './schemas/Profile';\nimport { Appointment } from './schemas/Appointment';\n\nimport { Query } from './resolvers/Query';\nimport { Mutation } from './resolvers/Mutation';\nimport { AuthPayload } from './resolvers/AuthPayload';\n\nexport const DateTime = asNexusMethod(DateTimeResolver, 'date');\n\nconst schemaWithPermissions = makeSchema({\n  types: [User, Barber, Profile, Appointment, Query, Mutation, AuthPayload],\n  outputs: {\n    schema: path.join(__dirname, '..', '..', '..', '..', 'schema.graphql'),\n    typegen: path.join(__dirname, '..', '..', '..', '..', 'generated', 'nexus.ts'),\n  },\n  plugins: [nexusPrisma({ experimentalCRUD: true }), connectionPlugin()],\n  contextType: {\n    module: path.join(__filename, '..', 'context.ts'),\n    export: 'Context',\n  },\n  sourceTypes: {\n    modules: [\n      {\n        module: '@prisma/client',\n        alias: 'prisma',\n      },\n    ],\n  },\n});\n\nexport const schema = applyMiddleware(schemaWithPermissions, permissions);\n"]},"metadata":{},"sourceType":"module"}