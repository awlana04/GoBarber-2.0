{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ApolloClient, InMemoryCache, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from 'apollo-link-context';\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000'\n});\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => {\n      console.log(`[GraphQLError]: Message: ${message}, location: ${locations}, path: ${path}`);\n    });\n  }\n\n  if (networkError) {\n    console.log(`[NetworkError]: ${networkError}`);\n  }\n});\nconst authLink = setContext(async (request, {\n  headers\n}) => {\n  const token = localStorage.getItem('token');\n  return _objectSpread(_objectSpread({}, headers), {}, {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : null\n    }\n  });\n});\nconst link = authLink.concat(httpLink);\nconst client = new ApolloClient({\n  link: from([errorLink, link]),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/hooks/auth.ts"],"names":["ApolloClient","InMemoryCache","HttpLink","from","onError","setContext","httpLink","uri","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","log","authLink","request","headers","token","localStorage","getItem","Authorization","link","concat","client","cache"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,QAAtC,EAAgDC,IAAhD,QAA4D,gBAA5D;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,MAAMC,QAAQ,GAAG,IAAIJ,QAAJ,CAAa;AAAEK,EAAAA,GAAG,EAAE;AAAP,CAAb,CAAjB;AAEA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,CAAC;AAAEK,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAqC;AAC7D,MAAID,aAAJ,EAAmB;AACjBA,IAAAA,aAAa,CAACE,OAAd,CAAsB,CAAC;AAAEC,MAAAA,OAAF;AAAWC,MAAAA,SAAX;AAAsBC,MAAAA;AAAtB,KAAD,KAAkC;AACtDC,MAAAA,OAAO,CAACC,GAAR,CACG,4BAA2BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAD7E;AAGD,KAJD;AAKD;;AAED,MAAIJ,YAAJ,EAAkB;AAChBK,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBN,YAAa,EAA5C;AACD;AACF,CAZwB,CAAzB;AAcA,MAAMO,QAAQ,GAAGZ,UAAU,CAAC,OAAOa,OAAP,EAAgB;AAAEC,EAAAA;AAAF,CAAhB,KAAgC;AAC1D,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AAEA,yCACKH,OADL;AAEEA,IAAAA,OAAO,EAAE;AACPI,MAAAA,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAnB,GAAuB;AADpC;AAFX;AAMD,CAT0B,CAA3B;AAWA,MAAMI,IAAI,GAAGP,QAAQ,CAACQ,MAAT,CAAgBnB,QAAhB,CAAb;AAEA,MAAMoB,MAAM,GAAG,IAAI1B,YAAJ,CAAiB;AAC9BwB,EAAAA,IAAI,EAAErB,IAAI,CAAC,CAACK,SAAD,EAAYgB,IAAZ,CAAD,CADoB;AAE9BG,EAAAA,KAAK,EAAE,IAAI1B,aAAJ;AAFuB,CAAjB,CAAf;AAKA,eAAeyB,MAAf","sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink, from } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { setContext } from 'apollo-link-context';\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' });\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQLError]: Message: ${message}, location: ${locations}, path: ${path}`\n      );\n    })\n  }\n\n  if (networkError) {\n    console.log(`[NetworkError]: ${networkError}`);\n  }\n})\n\nconst authLink = setContext(async (request, { headers }) => {\n  const token = localStorage.getItem('token');\n\n  return {\n    ...headers,\n    headers: {\n      Authorization: token ? `Bearer ${token}` : null,\n    }\n  }\n})\n\nconst link = authLink.concat(httpLink as any);\n\nconst client = new ApolloClient({\n  link: from([errorLink, link as any]),\n  cache: new InMemoryCache(),\n})\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}