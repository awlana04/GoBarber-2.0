{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n;\nexport function createContext(request) {\n  return _objectSpread(_objectSpread({}, request), {}, {\n    prisma\n  });\n}\n;","map":{"version":3,"sources":["/home/lon1/Documents/scripts/www/GoBarber-2.0/web/src/pages/api/context.ts"],"names":["PrismaClient","prisma","createContext","request"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;AAKC;AAED,OAAO,SAASE,aAAT,CAAuBC,OAAvB,EAAqC;AAC1C,yCACKA,OADL;AAEEF,IAAAA;AAFF;AAID;AAAA","sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport interface Context {\n  prisma: PrismaClient;\n  request: any;\n};\n\nexport function createContext(request: any) {\n  return {\n    ...request,\n    prisma,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}