### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Appointment {
  createdAt: Int

  """Appointment's details"""
  date: Int
  id: String!
  updatedAt: Int
}

input AppointmentCreateInput {
  barber: BarberCreateNestedOneWithoutAppointmentInput!
  createdAt: DateTime
  date: DateTime!
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutAppointmentInput!
}

input AppointmentCreateNestedManyWithoutBarberInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutBarberInput!]
  create: [AppointmentCreateWithoutBarberInput!]
}

input AppointmentCreateNestedManyWithoutUserInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutUserInput!]
  create: [AppointmentCreateWithoutUserInput!]
}

input AppointmentCreateOrConnectWithoutBarberInput {
  create: AppointmentCreateWithoutBarberInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentCreateOrConnectWithoutUserInput {
  create: AppointmentCreateWithoutUserInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentCreateWithoutBarberInput {
  createdAt: DateTime
  date: DateTime!
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutAppointmentInput!
}

input AppointmentCreateWithoutUserInput {
  barber: BarberCreateNestedOneWithoutAppointmentInput!
  createdAt: DateTime
  date: DateTime!
  id: String
  updatedAt: DateTime
}

input AppointmentScalarWhereInput {
  AND: [AppointmentScalarWhereInput!]
  NOT: [AppointmentScalarWhereInput!]
  OR: [AppointmentScalarWhereInput!]
  barberId: StringFilter
  createdAt: DateTimeFilter
  date: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AppointmentUpdateInput {
  barber: BarberUpdateOneRequiredWithoutAppointmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAppointmentInput
}

input AppointmentUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppointmentUpdateManyWithWhereWithoutBarberInput {
  data: AppointmentUpdateManyMutationInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateManyWithWhereWithoutUserInput {
  data: AppointmentUpdateManyMutationInput!
  where: AppointmentScalarWhereInput!
}

input AppointmentUpdateManyWithoutBarberInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutBarberInput!]
  create: [AppointmentCreateWithoutBarberInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutBarberInput!]
  updateMany: [AppointmentUpdateManyWithWhereWithoutBarberInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutBarberInput!]
}

input AppointmentUpdateManyWithoutUserInput {
  connect: [AppointmentWhereUniqueInput!]
  connectOrCreate: [AppointmentCreateOrConnectWithoutUserInput!]
  create: [AppointmentCreateWithoutUserInput!]
  delete: [AppointmentWhereUniqueInput!]
  deleteMany: [AppointmentScalarWhereInput!]
  disconnect: [AppointmentWhereUniqueInput!]
  set: [AppointmentWhereUniqueInput!]
  update: [AppointmentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AppointmentUpdateManyWithWhereWithoutUserInput!]
  upsert: [AppointmentUpsertWithWhereUniqueWithoutUserInput!]
}

input AppointmentUpdateWithWhereUniqueWithoutBarberInput {
  data: AppointmentUpdateWithoutBarberInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithWhereUniqueWithoutUserInput {
  data: AppointmentUpdateWithoutUserInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpdateWithoutBarberInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAppointmentInput
}

input AppointmentUpdateWithoutUserInput {
  barber: BarberUpdateOneRequiredWithoutAppointmentInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AppointmentUpsertWithWhereUniqueWithoutBarberInput {
  create: AppointmentCreateWithoutBarberInput!
  update: AppointmentUpdateWithoutBarberInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentUpsertWithWhereUniqueWithoutUserInput {
  create: AppointmentCreateWithoutUserInput!
  update: AppointmentUpdateWithoutUserInput!
  where: AppointmentWhereUniqueInput!
}

input AppointmentWhereUniqueInput {
  id: String
}

type Barber {
  """Barber's information"""
  barberLocation: String!
  barberName: String!
  createdAt: Int
  description: String
  id: String!
  openOnWeekends: Boolean!
  photos: [String!]!
  updatedAt: Int
}

input BarberCreateInput {
  appointment: AppointmentCreateNestedManyWithoutBarberInput
  barberLocation: String!
  barberName: String!
  createdAt: DateTime
  description: String
  id: String
  openOnWeekends: Boolean!
  photos: BarberCreatephotosInput
  updatedAt: DateTime
}

input BarberCreateNestedOneWithoutAppointmentInput {
  connect: BarberWhereUniqueInput
  connectOrCreate: BarberCreateOrConnectWithoutAppointmentInput
  create: BarberCreateWithoutAppointmentInput
}

input BarberCreateOrConnectWithoutAppointmentInput {
  create: BarberCreateWithoutAppointmentInput!
  where: BarberWhereUniqueInput!
}

input BarberCreateWithoutAppointmentInput {
  barberLocation: String!
  barberName: String!
  createdAt: DateTime
  description: String
  id: String
  openOnWeekends: Boolean!
  photos: BarberCreatephotosInput
  updatedAt: DateTime
}

input BarberCreatephotosInput {
  set: [String!]
}

input BarberUpdateInput {
  appointment: AppointmentUpdateManyWithoutBarberInput
  barberLocation: StringFieldUpdateOperationsInput
  barberName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  openOnWeekends: BoolFieldUpdateOperationsInput
  photos: BarberUpdatephotosInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BarberUpdateOneRequiredWithoutAppointmentInput {
  connect: BarberWhereUniqueInput
  connectOrCreate: BarberCreateOrConnectWithoutAppointmentInput
  create: BarberCreateWithoutAppointmentInput
  update: BarberUpdateWithoutAppointmentInput
  upsert: BarberUpsertWithoutAppointmentInput
}

input BarberUpdateWithoutAppointmentInput {
  barberLocation: StringFieldUpdateOperationsInput
  barberName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  openOnWeekends: BoolFieldUpdateOperationsInput
  photos: BarberUpdatephotosInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BarberUpdatephotosInput {
  set: [String!]
}

input BarberUpsertWithoutAppointmentInput {
  create: BarberCreateWithoutAppointmentInput!
  update: BarberUpdateWithoutAppointmentInput!
}

input BarberWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Mutation {
  createOneAppointment(data: AppointmentCreateInput!): Appointment!
  createOneBarber(data: BarberCreateInput!): Barber!
  createOneUser(data: UserCreateInput!): User!
  deleteOneAppointment(where: AppointmentWhereUniqueInput!): Appointment
  deleteOneBarber(where: BarberWhereUniqueInput!): Barber
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneAppointment(data: AppointmentUpdateInput!, where: AppointmentWhereUniqueInput!): Appointment
  updateOneBarber(data: BarberUpdateInput!, where: BarberWhereUniqueInput!): Barber
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  appointment(where: AppointmentWhereUniqueInput!): Appointment
  appointments(after: AppointmentWhereUniqueInput, before: AppointmentWhereUniqueInput, first: Int, last: Int): [Appointment!]!
  barber(where: BarberWhereUniqueInput!): Barber
  barbers(after: BarberWhereUniqueInput, before: BarberWhereUniqueInput, first: Int, last: Int): [Barber!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  avatar: String
  createdAt: Int

  """User's credentials"""
  email: String
  id: String!
  name: String!
  password: String!

  """User's about"""
  type: Boolean!
  updatedAt: Int
}

input UserCreateInput {
  appointment: AppointmentCreateNestedManyWithoutUserInput
  avatar: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  id: String
  name: String!
  password: String!
  type: Boolean
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAppointmentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAppointmentInput
  create: UserCreateWithoutAppointmentInput
}

input UserCreateOrConnectWithoutAppointmentInput {
  create: UserCreateWithoutAppointmentInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAppointmentInput {
  avatar: String
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  id: String
  name: String!
  password: String!
  type: Boolean
  updatedAt: DateTime
}

input UserUpdateInput {
  appointment: AppointmentUpdateManyWithoutUserInput
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  type: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAppointmentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAppointmentInput
  create: UserCreateWithoutAppointmentInput
  update: UserUpdateWithoutAppointmentInput
  upsert: UserUpsertWithoutAppointmentInput
}

input UserUpdateWithoutAppointmentInput {
  avatar: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  type: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAppointmentInput {
  create: UserCreateWithoutAppointmentInput!
  update: UserUpdateWithoutAppointmentInput!
}

input UserWhereUniqueInput {
  email: String
  id: String
}
