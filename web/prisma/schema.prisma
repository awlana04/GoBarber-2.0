// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(uuid())

  // User's about
  type Boolean @default(false)
  name String

  // User's credentials
  email         String    @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?

  // User's action
  comments String[]

  appointment Appointment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "users")
}

model Barber {
  id String @id @default(uuid())

  // Barber's information
  barberLocation String   @map(name: "barber_location")
  barberName     String?  @map(name: "barber_name")
  description    String?
  photos         String[]
  openOnWeekends Boolean  @map(name: "open_on_weekends")

  // Barber's analytics
  starRating Int[]    @map(name: "star_rating")
  comments   String[]

  appointment Appointment[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "barbers")
}

model Appointment {
  id String @id @default(uuid())

  // Appointment's details
  date DateTime

  userId   String @map(name: "user_id")
  user     User   @relation(fields: [userId], references: [id])
  barberId String @map(name: "barber_id")
  barber   Barber @relation(fields: [barberId], references: [id])

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "appointments")
}

model Account {
  id String @id @default(uuid())

  compoundId        String @unique @map(name: "compound_id")
  userId            String @map(name: "user_id")
  providerType      String @map(name: "provider_type")
  providerId        String @map(name: "provider_id")
  providerAccountId String @map(name: "provider_account_id")

  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id String @id @default(uuid())

  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id String @id @default(uuid())

  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  @@map(name: "verification_requests")
}
