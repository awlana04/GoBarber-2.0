### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Appointment {
  barber: Barber!
  createdAt: DateTime!
  date: DateTime!
  id: String!
  updatedAt: DateTime!
  user: User!
}

input AppointmentWhereUniqueInput {
  id: String
}

type AuthPayload {
  token: String
  user: User
}

type Barber {
  appointments(after: AppointmentWhereUniqueInput, before: AppointmentWhereUniqueInput, first: Int, last: Int): [Appointment!]!
  barberLocation: String!
  barberName: String
  createdAt: DateTime!
  description: String
  id: String!
  openOnWeekends: Boolean!
  photos: [String!]!
  updatedAt: DateTime!
  user: User
}

input BarberWhereUniqueInput {
  id: String
}

scalar DateTime

type Mutation {
  signup(email: String!, password: String!): AuthPayload
}

type Profile {
  avatar: String
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
  user: User
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  allBarbers: Barber
  me: User
}

type User {
  appointment(after: AppointmentWhereUniqueInput, before: AppointmentWhereUniqueInput, first: Int, last: Int): [Appointment!]!
  barber(after: BarberWhereUniqueInput, before: BarberWhereUniqueInput, first: Int, last: Int): [Barber!]!
  createdAt: DateTime!
  email: String!
  id: String!
  image: String
  name: String
  profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
  updatedAt: DateTime!
}
